import React, { useEffect, useState } from "react";
import axiosInstace from "../api/AxiosInstance";
import { VscDebugBreakpointLog } from "react-icons/vsc";

const CompanyInfo = () => {
  const [infoList, setInfoList] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedInfo, setSelectedInfo] = useState(null);
  const [formData, setFormData] = useState({
    companyName: "",
    phone: "",
    mobile: "",
    Address: {
      street: "",
      district: "",
      state: "",
      country: "",
      pincode: "",
    },
    service: [],
    TermsAndCondition: [],
  });
  const [newService, setNewService] = useState("");
  const [newTerm, setNewTerm] = useState("");

  useEffect(() => {
    const fetchInfo = async () => {
      try {
        const response = await axiosInstace.get("/api/get-all-info");
        setInfoList(response.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchInfo();
  }, []);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  const handleUpdate = (info) => {
    setSelectedInfo(info);
    setFormData(info);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddressChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      Address: { ...prev.Address, [name]: value },
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axiosInstace.put(`/api/update-info/${selectedInfo._id}`, formData);
      setInfoList((prev) =>
        prev.map((item) => (item._id === selectedInfo._id ? formData : item))
      );
      setSelectedInfo(null);
    } catch (err) {
      setError(err.message);
    }
  };

  const addService = () => {
    if (newService) {
      setFormData((prev) => ({
        ...prev,
        service: [...prev.service, newService],
      }));
      setNewService("");
    }
  };

  const deleteService = (index) => {
    setFormData((prev) => ({
      ...prev,
      service: prev.service.filter((_, i) => i !== index),
    }));
  };

  const addTerm = () => {
    if (newTerm) {
      setFormData((prev) => ({
        ...prev,
        TermsAndCondition: [...prev.TermsAndCondition, newTerm],
      }));
      setNewTerm("");
    }
  };

  const deleteTerm = (index) => {
    setFormData((prev) => ({
      ...prev,
      TermsAndCondition: prev.TermsAndCondition.filter((_, i) => i !== index),
    }));
  };

  return (
    <div>
      <ul style={{ listStyleType: "none" }}>
        {infoList.map((info) => (
          <li key={info._id}>
            <h2
              className="company-title fw-bold text-uppercase"
              style={{ letterSpacing: "2px", color: "#e31b25" }}
            >
              {info.companyName}
            </h2>
            <div className="my-2" style={{ color: "#ff7171" }}>
              <p className="mb-2">Phone: {info.phone}</p>
              <p>Mobile: {info.mobile}</p>
            </div>
            <div className="mb-3">
              <h6 className="fw-bold mb-2">Address:</h6>
              <p>
                {info.Address.street}, {info.Address.district},{" "}
                {info.Address.state}, {info.Address.country} -{" "}
                {info.Address.pincode}
              </p>
            </div>
            <div>
              <h6 className="fw-bold mb-2">Services:</h6>
              <ul style={{ listStyleType: "none" }}>
                {info.service.map((service, index) => (
                  <li key={index}>
                    <VscDebugBreakpointLog
                      className="me-2"
                      style={{ color: "#ff7171" }}
                    />
                    {service}
                  </li>
                ))}
              </ul>
            </div>
            <div>
              <h6 className="fw-bold mb-2 mt-2">Terms:</h6>
              <ul style={{ listStyleType: "none" }}>
                {info.TermsAndCondition.map((term, index) => (
                  <li key={index}>
                    <VscDebugBreakpointLog
                      className="me-2"
                      style={{ color: "#ff7171" }}
                    />
                    {term}
                  </li>
                ))}
              </ul>
            </div>
            <button
              className="btn btn-danger mt-3"
              onClick={() => handleUpdate(info)}
            >
              Update
            </button>
          </li>
        ))}
      </ul>

      {selectedInfo && (
        <div className="modal show w-100" style={{ display: "block" }}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5
                  className="modal-title fw-bold"
                  style={{ letterSpacing: "2px", color: "#e31b25" }}
                >
                  Update Info
                </h5>
                <button
                  className="btn-close"
                  onClick={() => setSelectedInfo(null)}
                ></button>
              </div>
              <div className="modal-body">
                <form onSubmit={handleSubmit}>
                  <div className="mb-3">
                    <label className="form-label">Company Name:</label>
                    <input
                      type="text"
                      name="companyName"
                      value={formData.companyName}
                      onChange={handleChange}
                      className="form-control"
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <label className="form-label">Phone:</label>
                    <input
                      type="text"
                      name="phone"
                      value={formData.phone}
                      onChange={handleChange}
                      className="form-control"
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <label className="form-label">Mobile:</label>
                    <input
                      type="text"
                      name="mobile"
                      value={formData.mobile}
                      onChange={handleChange}
                      className="form-control"
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <h6>Address:</h6>
                    <label className="form-label mt-2">Street:</label>
                    <input
                      type="text"
                      name="street"
                      value={formData.Address.street}
                      onChange={handleAddressChange}
                      className="form-control"
                      required
                    />
                    <label className="form-label">District:</label>
                    <input
                      type="text"
                      name="district"
                      value={formData.Address.district}
                      onChange={handleAddressChange}
                      className="form-control"
                      required
                    />
                    <label className="form-label">State:</label>
                    <input
                      type="text"
                      name="state"
                      value={formData.Address.state}
                      onChange={handleAddressChange}
                      className="form-control"
                      required
                    />
                    <label className="form-label">Country:</label>
                    <input
                      type="text"
                      name="country"
                      value={formData.Address.country}
                      onChange={handleAddressChange}
                      className="form-control"
                      required
                    />
                    <label className="form-label">Pincode:</label>
                    <input
                      type="number"
                      name="pincode"
                      value={formData.Address.pincode}
                      onChange={handleAddressChange}
                      className="form-control"
                      required
                    />
                  </div>

                  <div className="mb-3">
                    <h6>Add New Service:</h6>
                    <input
                      type="text"
                      value={newService}
                      onChange={(e) => setNewService(e.target.value)}
                      className="form-control mt-2"
                      placeholder="Enter service name"
                    />
                    <button
                      type="button"
                      onClick={addService}
                      className="btn btn-primary mt-2"
                    >
                      Add Service
                    </button>
                    <ul className="list-group mt-2">
                      {formData.service.map((service, index) => (
                        <li
                          className="list-group-item d-flex justify-content-between align-items-center"
                          key={index}
                        >
                          {service}
                          <button
                            onClick={() => deleteService(index)}
                            className="btn btn-danger btn-sm"
                          >
                            Delete
                          </button>
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div className="mb-3">
                    <h6>Add New Term:</h6>
                    <input
                      type="text"
                      value={newTerm}
                      onChange={(e) => setNewTerm(e.target.value)}
                      className="form-control mt-2"
                      placeholder="Enter term"
                    />
                    <button
                      type="button"
                      onClick={addTerm}
                      className="btn btn-primary mt-2"
                    >
                      Add Term
                    </button>
                    <ul className="list-group mt-2">
                      {formData.TermsAndCondition.map((term, index) => (
                        <li
                          className="list-group-item d-flex justify-content-between align-items-center"
                          key={index}
                        >
                          {term}
                          <button
                            onClick={() => deleteTerm(index)}
                            className="btn btn-danger btn-sm"
                          >
                            Delete
                          </button>
                        </li>
                      ))}
                    </ul>
                  </div>

                  <button type="submit" className="btn btn-success">
                    Save Changes
                  </button>
                </form>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CompanyInfo;
